// This file is auto-generated by @hey-api/openapi-ts

export const $DueReason = {
    type: 'string',
    enum: ['TIME', 'METER', 'BOTH', 'NOT_DUE'],
    title: 'DueReason'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $MachineSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        vin: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Vin'
        },
        meter_unit: {
            type: 'string',
            title: 'Meter Unit'
        },
        make: {
            type: 'string',
            title: 'Make'
        },
        model: {
            type: 'string',
            title: 'Model'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        image: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Image'
        },
        purchase_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Purchase Date'
        },
        meter_readings: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/MeterReadingSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Meter Readings',
            default: []
        },
        tasks: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/TaskSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tasks',
            default: []
        },
        current_meter_reading: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Meter Reading',
            default: 0
        }
    },
    type: 'object',
    required: ['meter_unit', 'make', 'model', 'year'],
    title: 'MachineSchema'
} as const;

export const $MachineUpdateSchema = {
    properties: {
        vin: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Vin'
        },
        meter_unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Meter Unit'
        },
        make: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Make'
        },
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model'
        },
        year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Year'
        },
        image: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Image'
        },
        purchase_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Purchase Date'
        }
    },
    type: 'object',
    title: 'MachineUpdateSchema'
} as const;

export const $MeterReadingSchema = {
    properties: {
        id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id'
        },
        value: {
            type: 'number',
            title: 'Value'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            title: 'Timestamp'
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        }
    },
    type: 'object',
    required: ['value'],
    title: 'MeterReadingSchema'
} as const;

export const $PartSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        link: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Link'
        },
        supply_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Supply Id'
        },
        supply: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SupplySchema'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'link'],
    title: 'PartSchema'
} as const;

export const $SupplySchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        unit: {
            type: 'string',
            title: 'Unit'
        },
        quantity_on_hand: {
            type: 'number',
            title: 'Quantity On Hand'
        },
        parts: {
            items: {
                '$ref': '#/components/schemas/PartSchema'
            },
            type: 'array',
            title: 'Parts',
            default: []
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        task_supplies: {
            items: {
                '$ref': '#/components/schemas/TaskSupplySchema'
            },
            type: 'array',
            title: 'Task Supplies',
            default: []
        }
    },
    type: 'object',
    required: ['name', 'unit', 'quantity_on_hand'],
    title: 'SupplySchema'
} as const;

export const $SupplyUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Unit'
        },
        quantity_on_hand: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Quantity On Hand'
        },
        parts: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/PartSchema'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parts',
            default: []
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        task_supplies: {
            items: {
                '$ref': '#/components/schemas/TaskSupplySchema'
            },
            type: 'array',
            title: 'Task Supplies',
            default: []
        }
    },
    type: 'object',
    required: ['quantity_on_hand'],
    title: 'SupplyUpdateSchema'
} as const;

export const $TaskCompleteSchema = {
    properties: {
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        completed_date: {
            type: 'string',
            format: 'date',
            title: 'Completed Date'
        },
        completed_meter_reading: {
            type: 'number',
            title: 'Completed Meter Reading'
        }
    },
    type: 'object',
    required: ['completed_date', 'completed_meter_reading'],
    title: 'TaskCompleteSchema'
} as const;

export const $TaskCreateSchema = {
    properties: {
        task_supplies: {
            items: {
                '$ref': '#/components/schemas/TaskSupplySchema'
            },
            type: 'array',
            title: 'Task Supplies',
            default: []
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        time_interval: {
            type: 'integer',
            title: 'Time Interval'
        },
        meter_interval: {
            type: 'number',
            title: 'Meter Interval'
        },
        recurring: {
            type: 'boolean',
            title: 'Recurring'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        due_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Date'
        },
        due_meter_reading: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Meter Reading',
            default: 0
        }
    },
    type: 'object',
    required: ['description', 'time_interval', 'meter_interval', 'recurring'],
    title: 'TaskCreateSchema'
} as const;

export const $TaskDetailedState = {
    properties: {
        state: {
            '$ref': '#/components/schemas/TaskDueState'
        },
        due_reason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/DueReason'
                }
            ],
            default: 'NOT_DUE'
        }
    },
    type: 'object',
    required: ['state'],
    title: 'TaskDetailedState'
} as const;

export const $TaskDueState = {
    type: 'string',
    enum: ['OVERDUE', 'DUE', 'UPCOMING', 'COMPLETED'],
    title: 'TaskDueState'
} as const;

export const $TaskSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        time_interval: {
            type: 'integer',
            title: 'Time Interval'
        },
        meter_interval: {
            type: 'number',
            title: 'Meter Interval'
        },
        recurring: {
            type: 'boolean',
            title: 'Recurring',
            default: false
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        completed: {
            type: 'boolean',
            title: 'Completed',
            default: false
        },
        completed_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed Date'
        },
        completed_meter_reading: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed Meter Reading'
        },
        due_date: {
            type: 'string',
            format: 'date',
            title: 'Due Date'
        },
        due_meter_reading: {
            type: 'number',
            title: 'Due Meter Reading'
        },
        todoist_task_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Todoist Task Id'
        },
        machine_id: {
            type: 'string',
            title: 'Machine Id'
        },
        task_supplies: {
            items: {
                '$ref': '#/components/schemas/TaskSupplySchema'
            },
            type: 'array',
            title: 'Task Supplies',
            default: []
        },
        due_meter_ago: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Meter Ago'
        },
        due_days_ago: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Due Days Ago'
        },
        detailed_state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TaskDetailedState'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['description', 'time_interval', 'meter_interval', 'notes', 'due_date', 'due_meter_reading', 'machine_id'],
    title: 'TaskSchema'
} as const;

export const $TaskSupplySchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        quantity_required: {
            type: 'number',
            title: 'Quantity Required'
        },
        supply_id: {
            type: 'string',
            title: 'Supply Id'
        },
        supply: {
            '$ref': '#/components/schemas/SupplySchema'
        },
        task_id: {
            type: 'string',
            title: 'Task Id'
        },
        task: {
            '$ref': '#/components/schemas/TaskSchema'
        }
    },
    type: 'object',
    required: ['quantity_required', 'supply_id', 'supply', 'task_id', 'task'],
    title: 'TaskSupplySchema'
} as const;

export const $TasksByStateSchema = {
    properties: {
        overdue: {
            items: {
                '$ref': '#/components/schemas/TaskSchema'
            },
            type: 'array',
            title: 'Overdue',
            default: []
        },
        due: {
            items: {
                '$ref': '#/components/schemas/TaskSchema'
            },
            type: 'array',
            title: 'Due',
            default: []
        },
        upcoming: {
            items: {
                '$ref': '#/components/schemas/TaskSchema'
            },
            type: 'array',
            title: 'Upcoming',
            default: []
        },
        completed: {
            items: {
                '$ref': '#/components/schemas/TaskSchema'
            },
            type: 'array',
            title: 'Completed',
            default: []
        }
    },
    type: 'object',
    title: 'TasksByStateSchema'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;