// This file is auto-generated by @hey-api/openapi-ts

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Machine = {
    vin?: string | null;
    meter_unit: string;
    make: string;
    model: string;
    year: number;
    image?: string | null;
    purchase_date?: Date | null;
    meter_readings?: Array<MeterReading>;
    tasks?: Array<Task>;
    current_meter_reading?: number | null;
    name?: string | null;
    id?: string;
};

export type MeterReading = {
    value: number;
    timestamp?: Date;
};

export type Part = {
    id?: string;
    name: string;
    link?: string | null;
};

export type Supply = {
    name: string;
    unit: string;
    quantity_on_hand?: number;
    parts: Array<Part>;
    machine_id?: string | null;
    id?: string;
};

export type Task = {
    id?: string;
    description: string;
    time_interval: number;
    meter_interval: number;
    recurring?: boolean | null;
    notes?: string | null;
    supplies?: Array<TaskSupply>;
    completed?: boolean;
    completed_date?: Date | null;
    completed_meter_reading?: number | null;
    due_date?: Date | null;
    due_meter_reading?: number | null;
    due_meter_ago?: number | null;
    due_days_ago?: number | null;
};

export type TaskCreate = {
    description: string;
    time_interval: number;
    meter_interval: number;
    recurring?: boolean | null;
    notes?: string | null;
    supplies?: Array<TaskSupply>;
    initial_due_meter?: number | null;
    initial_due_date?: Date | null;
};

export type TaskSupply = {
    id?: string;
    name: string;
    unit: string;
    quantity_required?: number;
    supply_id: string;
    parts: Array<Part>;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type UpdateMachineData = {
    machineId: string;
    requestBody: Machine;
};

export type UpdateMachineResponse = Machine;

export type DeleteMachineData = {
    machineId: string;
};

export type DeleteMachineResponse = Machine;

export type GetMachineData = {
    machineId: string;
};

export type GetMachineResponse = Machine;

export type GetMachinesResponse = Array<Machine>;

export type CreateMachineData = {
    requestBody: Machine;
};

export type CreateMachineResponse = Machine;

export type CreateReadingData = {
    machineId: string;
    requestBody: MeterReading;
};

export type CreateReadingResponse = MeterReading;

export type DeleteTaskData = {
    machineId: string;
    taskId: string;
};

export type DeleteTaskResponse = Task;

export type CreateTaskData = {
    machineId: string;
    requestBody: TaskCreate;
};

export type CreateTaskResponse = Task;

export type CompleteTaskData = {
    machineId: string;
    requestBody: Task;
    taskId: string;
};

export type CompleteTaskResponse = Task;

export type UpdateSupplyData = {
    requestBody: Supply;
    supplyId: string;
};

export type UpdateSupplyResponse = Supply;

export type DeleteSupplyData = {
    supplyId: unknown;
};

export type DeleteSupplyResponse = Supply;

export type GetSuppliesResponse = Array<Supply>;

export type CreateSupplyData = {
    requestBody: Supply;
};

export type CreateSupplyResponse = Supply;

export type $OpenApiTs = {
    '/api/v1/machines/{machine_id}': {
        patch: {
            req: UpdateMachineData;
            res: {
                /**
                 * Successful Response
                 */
                200: Machine;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteMachineData;
            res: {
                /**
                 * Successful Response
                 */
                200: Machine;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetMachineData;
            res: {
                /**
                 * Successful Response
                 */
                200: Machine;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<Machine>;
            };
        };
        post: {
            req: CreateMachineData;
            res: {
                /**
                 * Successful Response
                 */
                200: Machine;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/{machine_id}/readings': {
        post: {
            req: CreateReadingData;
            res: {
                /**
                 * Successful Response
                 */
                200: MeterReading;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/{machine_id}/tasks/{task_id}': {
        delete: {
            req: DeleteTaskData;
            res: {
                /**
                 * Successful Response
                 */
                200: Task;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/{machine_id}/tasks': {
        post: {
            req: CreateTaskData;
            res: {
                /**
                 * Successful Response
                 */
                200: Task;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/{machine_id}/tasks/{task_id}/complete': {
        post: {
            req: CompleteTaskData;
            res: {
                /**
                 * Successful Response
                 */
                200: Task;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/supplies/{supply_id}': {
        patch: {
            req: UpdateSupplyData;
            res: {
                /**
                 * Successful Response
                 */
                200: Supply;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteSupplyData;
            res: {
                /**
                 * Successful Response
                 */
                200: Supply;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/supplies': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<Supply>;
            };
        };
        post: {
            req: CreateSupplyData;
            res: {
                /**
                 * Successful Response
                 */
                200: Supply;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};

export type UpdateMachineResponseTransformer = (data: any) => Promise<UpdateMachineResponse>;

export type MachineModelResponseTransformer = (data: any) => Machine;

export type MeterReadingModelResponseTransformer = (data: any) => MeterReading;

export const MeterReadingModelResponseTransformer: MeterReadingModelResponseTransformer = data => {
    if (data?.timestamp) {
        data.timestamp = new Date(data.timestamp);
    }
    return data;
};

export const MachineModelResponseTransformer: MachineModelResponseTransformer = data => {
    if (Array.isArray(data?.meter_readings)) {
        data.meter_readings.forEach(MeterReadingModelResponseTransformer);
    }
    return data;
};

export const UpdateMachineResponseTransformer: UpdateMachineResponseTransformer = async (data) => {
    MachineModelResponseTransformer(data);
    return data;
};

export type DeleteMachineResponseTransformer = (data: any) => Promise<DeleteMachineResponse>;

export const DeleteMachineResponseTransformer: DeleteMachineResponseTransformer = async (data) => {
    MachineModelResponseTransformer(data);
    return data;
};

export type GetMachineResponseTransformer = (data: any) => Promise<GetMachineResponse>;

export const GetMachineResponseTransformer: GetMachineResponseTransformer = async (data) => {
    MachineModelResponseTransformer(data);
    return data;
};

export type GetMachinesResponseTransformer = (data: any) => Promise<GetMachinesResponse>;

export const GetMachinesResponseTransformer: GetMachinesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(MachineModelResponseTransformer);
    }
    return data;
};

export type CreateMachineResponseTransformer = (data: any) => Promise<CreateMachineResponse>;

export const CreateMachineResponseTransformer: CreateMachineResponseTransformer = async (data) => {
    MachineModelResponseTransformer(data);
    return data;
};

export type CreateReadingResponseTransformer = (data: any) => Promise<CreateReadingResponse>;

export const CreateReadingResponseTransformer: CreateReadingResponseTransformer = async (data) => {
    MeterReadingModelResponseTransformer(data);
    return data;
};