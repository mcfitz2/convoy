// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import { type UpdateMachineData, type UpdateMachineResponse, type DeleteMachineData, type DeleteMachineResponse, type GetMachineData, type GetMachineResponse, type GetMachinesResponse, type CreateMachineData, type CreateMachineResponse, type CreateReadingData, type CreateReadingResponse, type DeleteTaskData, type DeleteTaskResponse, type CreateTaskData, type CreateTaskResponse, type CompleteTaskData, type CompleteTaskResponse, type UpdateSupplyData, type UpdateSupplyResponse, type DeleteSupplyData, type DeleteSupplyResponse, type GetSuppliesResponse, type CreateSupplyData, type CreateSupplyResponse, UpdateMachineResponseTransformer, DeleteMachineResponseTransformer, GetMachineResponseTransformer, GetMachinesResponseTransformer, CreateMachineResponseTransformer, CreateReadingResponseTransformer } from './types.gen';

/**
 * Update Machine
 * @param data The data for the request.
 * @param data.machineId
 * @param data.requestBody
 * @returns Machine Successful Response
 * @throws ApiError
 */
export const updateMachine = (data: UpdateMachineData): CancelablePromise<UpdateMachineResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    responseTransformer: UpdateMachineResponseTransformer,
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Machine
 * @param data The data for the request.
 * @param data.machineId
 * @returns Machine Successful Response
 * @throws ApiError
 */
export const deleteMachine = (data: DeleteMachineData): CancelablePromise<DeleteMachineResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    responseTransformer: DeleteMachineResponseTransformer,
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Machine
 * @param data The data for the request.
 * @param data.machineId
 * @returns Machine Successful Response
 * @throws ApiError
 */
export const getMachine = (data: GetMachineData): CancelablePromise<GetMachineResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    responseTransformer: GetMachineResponseTransformer,
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Machines
 * @returns Machine Successful Response
 * @throws ApiError
 */
export const getMachines = (): CancelablePromise<GetMachinesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines',
    responseTransformer: GetMachinesResponseTransformer
}); };

/**
 * Create Machine
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Machine Successful Response
 * @throws ApiError
 */
export const createMachine = (data: CreateMachineData): CancelablePromise<CreateMachineResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines',
    body: data.requestBody,
    mediaType: 'application/json',
    responseTransformer: CreateMachineResponseTransformer,
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Reading
 * @param data The data for the request.
 * @param data.machineId
 * @param data.requestBody
 * @returns MeterReading Successful Response
 * @throws ApiError
 */
export const createReading = (data: CreateReadingData): CancelablePromise<CreateReadingResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/{machine_id}/readings',
    path: {
        machine_id: data.machineId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    responseTransformer: CreateReadingResponseTransformer,
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Task
 * @param data The data for the request.
 * @param data.taskId
 * @param data.machineId
 * @returns Task Successful Response
 * @throws ApiError
 */
export const deleteTask = (data: DeleteTaskData): CancelablePromise<DeleteTaskResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/machines/{machine_id}/tasks/{task_id}',
    path: {
        task_id: data.taskId,
        machine_id: data.machineId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Task
 * @param data The data for the request.
 * @param data.machineId
 * @param data.requestBody
 * @returns Task Successful Response
 * @throws ApiError
 */
export const createTask = (data: CreateTaskData): CancelablePromise<CreateTaskResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/{machine_id}/tasks',
    path: {
        machine_id: data.machineId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Complete Task
 * @param data The data for the request.
 * @param data.machineId
 * @param data.taskId
 * @param data.requestBody
 * @returns Task Successful Response
 * @throws ApiError
 */
export const completeTask = (data: CompleteTaskData): CancelablePromise<CompleteTaskResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/{machine_id}/tasks/{task_id}/complete',
    path: {
        machine_id: data.machineId,
        task_id: data.taskId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Supply
 * @param data The data for the request.
 * @param data.supplyId
 * @param data.requestBody
 * @returns Supply Successful Response
 * @throws ApiError
 */
export const updateSupply = (data: UpdateSupplyData): CancelablePromise<UpdateSupplyResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/supplies/{supply_id}',
    path: {
        supply_id: data.supplyId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Supply
 * @param data The data for the request.
 * @param data.supplyId
 * @returns Supply Successful Response
 * @throws ApiError
 */
export const deleteSupply = (data: DeleteSupplyData): CancelablePromise<DeleteSupplyResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/supplies/{supply_id}',
    path: {
        supply_id: data.supplyId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Supplies
 * @returns Supply Successful Response
 * @throws ApiError
 */
export const getSupplies = (): CancelablePromise<GetSuppliesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/supplies'
}); };

/**
 * Create Supply
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Supply Successful Response
 * @throws ApiError
 */
export const createSupply = (data: CreateSupplyData): CancelablePromise<CreateSupplyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/supplies',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };